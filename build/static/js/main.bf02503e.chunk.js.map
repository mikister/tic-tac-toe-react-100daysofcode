{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","title","cellStates","currPlayer","gameFinished","e","cellId","target","dataset","newCellStates","this","setState","toggleCurrentPlayer","checkWinCondition","includes","className","ResetButton","bind","renderGridCells","Component","cells","push","onClick","changeCellState","data-cell-id","key","CellIcon","icon","faTimes","faCircle","console","dir","resetGame","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bf02503e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTimes } from '@fortawesome/free-solid-svg-icons'\nimport { faCircle } from '@fortawesome/free-regular-svg-icons'\n\nclass App extends Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: \"Tic Tac Toe in React\",\n      cellStates: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      currPlayer: \"X\",\n      gameFinished: false,\n    };\n  }\n\n  changeCellState(e) {\n    let cellId = e.target.dataset.cellId;\n    var newCellStates = this.state.cellStates;\n\n    if (this.state.cellStates[cellId] === \"\") {\n      newCellStates[cellId] = this.state.currPlayer;\n      this.setState({cellStates: newCellStates})\n\n      this.toggleCurrentPlayer();\n      this.checkWinCondition();\n    }\n  }\n\n  toggleCurrentPlayer() {\n    this.setState({currPlayer: (this.state.currPlayer === \"X\" ? \"O\" : \"X\")})\n  }\n\n  checkWinCondition() {\n    let cellStates = this.state.cellStates;\n\n    if (this.state.gameFinished)\n      return null;\n\n    if (!cellStates.includes(\"\")) {\n        this.setState(\n          {\n            title: \"Draw\",\n            gameFinished: true\n          }\n        );\n      }\n    \n    if (\n        (cellStates[0] === cellStates[1] && cellStates[1] === cellStates[2] && cellStates[2] !== \"\") ||\n        (cellStates[3] === cellStates[4] && cellStates[4] === cellStates[5] && cellStates[5] !== \"\") ||\n        (cellStates[6] === cellStates[7] && cellStates[7] === cellStates[8] && cellStates[8] !== \"\") ||\n\n        (cellStates[0] === cellStates[3] && cellStates[3] === cellStates[6] && cellStates[6] !== \"\") ||\n        (cellStates[1] === cellStates[4] && cellStates[4] === cellStates[7] && cellStates[7] !== \"\") ||\n        (cellStates[2] === cellStates[5] && cellStates[5] === cellStates[8] && cellStates[8] !== \"\") ||\n\n        (cellStates[0] === cellStates[4] && cellStates[4] === cellStates[8] && cellStates[8] !== \"\") ||\n        (cellStates[2] === cellStates[4] && cellStates[4] === cellStates[6] && cellStates[6] !== \"\")\n    ) {\n      this.setState(\n        {\n          title: \"Player \" + this.state.currPlayer + \" won!\",\n          gameFinished: true\n        }\n      );\n    }\n  }\n\n  resetGame() {\n    this.setState(\n      {\n        title: \"Tic Tac Toe in React\",\n        cellStates: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n        currPlayer: \"X\",\n        gameFinished: false,\n      }\n    );\n  }\n\n\n  render() {\n    return (\n      <div className=\"app\">\n  <h1 className=\"title\">{ this.state.title } { this.state.gameFinished ? ResetButton.bind(this)() : null }</h1>\n        <div className=\"frame-center\">\n          <main className=\"grid\">\n            { renderGridCells.bind(this)() }\n          </main>\n        </div>\n\n        <aside className=\"currentPlayer\">\n          <span className=\"currentPlayer__title\">Current Player</span>\n          <div><CellIcon state={this.state.currPlayer} /></div>\n        </aside>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\nfunction renderGridCells() {\n  var cells = [];\n  for (var cellId = 0; cellId < 9; cellId++) {\n    cells.push(<div className=\"cell\" onClick={ (e) => {this.changeCellState(e)} } data-cell-id={cellId} key={ cellId }><CellIcon state={ this.state.cellStates[cellId] } /></div>);\n  }\n  return cells;\n}\n\nconst CellIcon = ({ state }) => {\n  if (state === \"X\") {\n    return(\n      <FontAwesomeIcon className=\"cell--x\" icon={faTimes} />\n    );\n  }\n  else if (state === \"O\") {\n    return(\n      <FontAwesomeIcon className=\"cell--o\" icon={faCircle} />\n    );\n  }\n  else {\n    return null;\n  }\n}\n\nfunction ResetButton() {\n  console.dir(this);\n  return (\n    <button onClick={ this.resetGame.bind(this) }>Play Again</button>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}